[{"title":"Github无法登陆","date":"2020-02-06T00:56:17.000Z","path":"2020/02/06/GithububNologin/","text":"问题 最初在使用git时出现报错，如下 123456$ git push -u origin masterssh: Could not resolve hostname github.com: Temporary failure in name resolutionfatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 登陆github.com，报告404 ping github.com，超时 解决 需要在host文件里做些修改 1C:\\Windows\\System32\\drivers\\etc Win10操作系统，先给自己最高权限【右键-属性-安全-编辑】 在host文件追加内容 12345678192.30.253.113 github.com192.30.252.131 github.com185.31.16.185 github.global.ssl.fastly.net74.125.237.1 dl-ssl.google.com173.194.127.200 groups.google.com192.30.252.131 github.com185.31.16.185 github.global.ssl.fastly.net74.125.128.95 ajax.googleapis.com ping github.com，成功 登陆github.com，成功 将host文件权限恢复","tags":[{"name":"hexo","slug":"hexo","permalink":"http://goldcarpenter.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://goldcarpenter.github.io/tags/github/"}]},{"title":"javaIO（一）","date":"2020-02-02T09:55:36.000Z","path":"2020/02/02/javaIO/","text":"1.File类1.1 概述 java.io.File 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作 File类是一个与系统无关的类，任何的操作系统都可以使用这个类中的方法 1.2静态成员变量 static String pathSeparator：与系统有关的路径分隔符，为了方便，它被表示为一个字符串。 static char pathSeparatorChar：与系统有关的路径分隔符。 static string separator：与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。 static char separatorChar：与系统有关的默认名称分隔符。 1.3 构造方法 public File(String pathname) ：通过将给定的路径名字符串转换为抽象路径名来创建新的File实例。 public File(String parent, String child) ：拼接 父路径名字符串和子路径名字符串创建新的 File实例。 public File(File parent, String child) ：从父抽象路径名和子路径名字符串创建新的 File实例。 构造举例，代码如下： 无论该路径下是否存在文件或者目录，都不影响File对象的创建。 路径可以是以文件结尾，也可以是以文件夹结尾 路径可以是相对路径,也可以是绝对路径 路径可以是存在，也可以是不存在 创建File对象，只是把字符串路径封装为File对象，不考虑路径的真假情况 1.4 常用方法1.4.1获取功能的方法 public String getAbsolutePath() ：返回此File的绝对路径名字符串。 public String getPath() ：将此File转换为绝对/相对路径名字符串，toString调用此方法实现。 public String getName() ：返回由此File表示的文件或目录的名称。 public long length() ：返回由此File表示的文件的大小，字节单位。 API中说明：length()——表示文件的大小。但是File对象表示目录，则返回值0。 1.4.2绝对路径和相对路径 绝对路径：从盘符开始的路径，这是一个完整的路径。 相对路径：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。 1234567891011121314public class FilePath &#123; public static void main(String[] args) &#123; // D盘下的bbb.java文件 File f = new File(\"D:\\\\bbb.java\"); System.out.println(f.getAbsolutePath()); // 项目下的bbb.java文件 File f2 = new File(\"bbb.java\"); System.out.println(f2.getAbsolutePath()); &#125;&#125;输出结果：D:\\bbb.javaD:\\idea_project_test4\\bbb.java 1.4.3判断功能的方法 public boolean exists() ：此File表示的文件或目录是否实际存在。 public boolean isDirectory() ：此File表示的是否为目录。 public boolean isFile() ：此File表示的是否为文件。 isFile() &amp; isDirectory() 使用前提，路径必须是存在的，否则都返回false 1.4.4创建删除功能的方法 public boolean createNewFile() ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 只能创建文件，不能创建文件夹 创建文件的路径必须存在，否则会抛出异常 文件存在，不会创建，返回false public boolean delete() ：删除由此File表示的文件或目录。 如果此File表示目录，文件夹中有内容，不会删除返回false，目录必须为空才能删除 构造方法中路径不存在，返回false 直接在硬盘删除文件/文件夹，不走回收站，删除要谨慎 public boolean mkdir() 【不常用】：创建由此File表示的单级目录。 文件夹存在，不会创建，返回false 构造方法中给出的路径不存在，返回false public boolean mkdirs() 【常用】：创建由此File表示的目录，包括任何必需但不存在的父目录。 既可以创建单级文件夹，也可以创建多级文件夹 1.5目录的遍历 public String[] list() ：返回一个String数组，表示该File目录中的所有子文件或目录。 public File[] listFiles() ：返回一个File数组，表示该File目录中的所有的子文件或目录。 12345678910111213141516public class FileFor &#123; public static void main(String[] args) &#123; File dir = new File(\"d:\\\\java_code\"); //获取当前目录下的文件以及文件夹的名称。 String[] names = dir.list(); for(String name : names)&#123; System.out.println(name); &#125; //获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息 File[] files = dir.listFiles(); for (File file : files) &#123; System.out.println(file); &#125; &#125;&#125; 调用遍历方法的File对象，表示的必须是实际存在的目录，否则返回null，无法进行遍历。 可以遍历到隐藏的文件夹 1.6文件过滤器实现 java.io.FileFilter是一个接口，File过滤器。 该接口的对象可以传递给File类listFiles(FileFilter) 作为参数， 接口中只有一个方法。 boolean accept(File pathname) ：测试pathname是否应该包含在当前File目录中，符合则返回true。 分析： 接口作为参数，需要传递子类对象，重写其中方法。我们选择匿名内部类方式，比较简单。 accept方法，参数为File，表示当前File下所有的子文件和子目录。保留住则返回true，过滤掉则返回false。保留规则： 要么是.java文件。 要么是目录，用于继续遍历。 通过过滤器的作用，listFiles(FileFilter)返回的数组元素中，子文件对象都是符合条件的，可以直接打印。 代码实现： 123456789101112131415161718192021222324public class DiGuiDemo4 &#123; public static void main(String[] args) &#123; File dir = new File(\"D:\\\\aaa\"); printDir2(dir); &#125; public static void printDir2(File dir) &#123; // 匿名内部类方式,创建过滤器子类对象 File[] files = dir.listFiles(new FileFilter() &#123; @Override public boolean accept(File pathname) &#123; return pathname.getName().endsWith(\".java\")||pathname.isDirectory(); &#125; &#125;); // 循环打印 for (File file : files) &#123; if (file.isFile()) &#123; System.out.println(\"文件名:\" + file.getAbsolutePath()); &#125; else &#123; printDir2(file); &#125; &#125; &#125;&#125; 1.7文件过滤器实现Lambda优化分析：FileFilter是只有一个方法的接口，因此可以用lambda表达式简写。 lambda格式： 1()-&gt;&#123; &#125; 代码实现： 123456789101112131415public static void printDir3(File dir) &#123; // lambda的改写 File[] files = dir.listFiles(f -&gt;&#123; return f.getName().endsWith(\".java\") || f.isDirectory(); &#125;); // 循环打印 for (File file : files) &#123; if (file.isFile()) &#123; System.out.println(\"文件名:\" + file.getAbsolutePath()); &#125; else &#123; printDir3(file); &#125; &#125;&#125; 2.IO流2.1IO的分类根据数据的流向分为：输入流和输出流。 输入流 ：把数据从其他设备上读取到内存中的流。 输出流 ：把数据从内存 中写出到其他设备上的流。 格局数据的类型分为：字节流和字符流。 字节流 ：以字节为单位，读写数据的流。 字符流 ：以字符为单位，读写数据的流。 2.2顶级父类 输入流 输出流 字节流 字节输入流InputStream 字节输出流OutputStream 字符流 字符输入流Reader 字符输出流Writer","tags":[{"name":"java","slug":"java","permalink":"http://goldcarpenter.github.io/tags/java/"},{"name":"IO","slug":"IO","permalink":"http://goldcarpenter.github.io/tags/IO/"}]},{"title":"hexo博客绑定自定义域名","date":"2019-02-18T11:40:20.000Z","path":"2019/02/18/hexo博客绑定域名/","text":"1.准备 一个已经备案的阿里云域名（国内备案可太麻烦了） 一般域名实名认证通过后2-3天，才会恢复解析 2.前置知识 修改阿里云域名解析 主机记录 &amp; 记录值 &amp; 记录类型 主机记录【设置子域名】：指创建子域名时所添加域名前缀 主机记录 说明 www 解析后的域名为www.aliyun.com @ 直接解析主域名 aliyun.com ***** 泛解析，匹配其他所有域名 *.aliyun.com mail 将域名解析为mail.aliyun.com，通常用于解析邮箱服务器 二级域名 如：abc.aliyun.com，填写abc 三级域名 a.www.example.com，填写a.www 手机网站 如：m.aliyun.com，填写m 记录值是指需要将子域名指向哪个解析地址 可以输入服务器IP地址，也可以输入域名 记录类型 A记录：最普通常见的域名解析，是把某一主机名解析到服务器IP 主机记录 类型 记录值 www A 192.168.0.1 CNAME记录：是主机名到主机名的映射 主机记录 类型 记录值 @ CNAME othername.com AAAA：用来指定主机名（或域名）对应的IPv6地址。A记录对应的是IPV4地址 url转发：可以转发到某一个目录下，甚至某一个文件上。 url转发和cname的主要区别：CNAME记录是不可以转发到某一个目录下，甚至某一个文件上 3.配置阿里云域名解析 无论是A记录、CNAME、URL转发在实际使用时是全部可以设置多条记录的 为了之后项目域名保留，博客使用二级域名scu.yangyuxin.top 使用在线域名解析发现原域名对应多个IP，可能做了负载均衡，故记录类型没有使用A类型 记录类型 主机记录 记录值 CNAME scu 博客原域名 获取博客IP地址方法 cmd窗口中ping 博客原goldcarpenter.github.io 网页在线域名解析服务获取 在本地博客..\\source中新建CNAME文件，注意无拓展名，内容输入scu.yangyuxin.top【新域名】 使用git shell 1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 如此 在github的博客仓库中就会设置自定义域名，已经修改，无需再次修改 大功告成","tags":[{"name":"hexo","slug":"hexo","permalink":"http://goldcarpenter.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://goldcarpenter.github.io/tags/github/"}]},{"title":"【博客搭建】使用hexo与github搭建个人博客系统（一）","date":"2018-10-27T14:19:02.000Z","path":"2018/10/27/配置hexo与github/","text":"1.软件准备 软件准备 注册Github账户(略) 安装node.js软件(略) 安装Git软件(略) 建议安装Typora(编辑博文使用，略) 创建github page仓库 在Github中创建goldcarpenter.github.io(goldcarpenter为github用户名)的仓库 未来博客网站访问地址就是https://goldcarpenter.github.io 了 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟 配置SSH key 使用SSH key（公钥私钥）验证登录可以简化我们的登录过程，避免输入账户密码 12ssh-keygen -t rsa -C &quot;youremail@qq.com&quot;提示信息——连续3次回车 在C盘的用户当前用户目录下找到.ssh\\id_rsa.pub，将公钥内容使用软件打开拷贝至setting -&gt; SSH and GPG keys -&gt; New SSH key 将刚复制的内容粘贴到key那里，title填你的计算机名称，保存。 测试SSH key 1ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： 1Hi goldcarpenter! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 如果你是首次使用git，git shell中配置 12345你的github用户名$ git config --global user.name &quot;goldcarpenter&quot;填写你的github注册邮箱$ git config --global user.email &quot;xxx@qq.com&quot; 2.搭建hexo博客系统2.1.前言 hexo简介 Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 hexo原理 由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容 hexo将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github 注意事项 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，为避免不必要的问题，使用的命令建议全部使用git bash来执行 hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； hexo有2类_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下管理各个主题的_config.yml； 2.2.本地hexo使用 安装hexo 1$ npm install -g hexo 创建博客本地存放文件夹 在电脑的某个地方新建一个文件夹，作为存放代码的地方。我的是F:\\Project\\Hexo_Repo 12$ cd [目标目录]$ hexo init 12345678910├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里| ├── _drafts #草稿| └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json #npm 依赖等 12$ hexo g # 生成相关页面$ hexo s # 启动本地hexo预览服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github的 hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到hexo写了一篇名为 Hello World 的文章内容 修改主题 官方主题中有很多优秀的主题，本文使用主题为BlueLake 12$ cd [目标目录]$ git clone https:&#x2F;&#x2F;github.com&#x2F;chaooo&#x2F;hexo-theme-BlueLake.git themes&#x2F;BlueLake 下载后的主题放在themes目录中 BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染 12$ npm install hexo-renderer-jade@0.3.0 --save$ npm install hexo-renderer-stylus --save 修改_config.yml中的theme: landscape改为theme: BlueLake 12$ hexo clean$ hexo g 更新主题 今后若主题添加了新功能正是需要的，可以直接git pull来更新主题 12cd themes&#x2F;BlueLakegit pull 2.3.hexo上传Github 上传之前 一定要记得先把你以前所有代码pull下来（虽然github有版本管理，但备份一下总是好的） 因为从hexo提交代码时会把你以前的所有代码都删掉 上传前配置准备 安装插件 1$ npm install hexo-deployer-git --save 配置_config.yml中有关deploy的部分 1234deploy: type: git repository: git@github.com:goldcarpenter&#x2F;goldcarpenter.github.io.git branch: master 上传 1hexo d 2.4.写博客 定位到我们的hexo根目录 1hexo new &#39;配置hexo与github&#39; hexo会帮我们在_posts下生成相关配置hexo与github.md文件 需要打开这个文件就可以开始写博客了 12345title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面 如何让博文列表不显示全部内容 默认情况下，生成的博文目录会显示全部的文章内容，在合适的位置加上&lt;!--more--&gt;即可设置文章摘要的长度 2.5.博客系统优化 根_config.yml配置 _config.yml详细说明 参数 描述 title 网站标题 显示在网站头部 subtitle 网站副标题 显示在网站头部 description 网站描述 加入网站源码的meta标签中 主要用于SEO keywords 网站的关键词。使用半角逗号 , 分隔多个关键词。 author 您的名字 网站底部的Copyright处有所显示 language 简体中文（zh-CN）繁体中文（zh-TW）英语（en） 1234567title: 掘金木匠subtitle: 不玩金融的软件工程师不是好的吃货description: JJMJ&#39;s blog.keywords: Java, Spring, MyBatis, 后端author: 掘金木匠language: zh-CNtimezone: &#39;&#39; 主题_config.yml设置 主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。 12345678910111213menu: - page: home directory: . icon: fa-home - page: archive directory: archives&#x2F; icon: fa-archive - page: about directory: about&#x2F; icon: fa-user #- page: rss # directory: atom.xml # icon: fa-rss 每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好： 1234about: email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 github_url: ## github主页链接地址 添加about页 此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面 1$ hexo new page &#39;about&#39; 1234567about: photo_url: ## 头像的链接地址 email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 weibo_name: ## 微博用户名 github_url: ## github主页链接地址 github_name: ## github用户名 当然也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好 安装 RSS(订阅) 和 sitemap(网站地图) 插件 123$ npm install hexo-generator-feed --save$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap --save 添加主题_config.yml配置 1234567891011121314Plugins: hexo-generator-feed hexo-generator-sitemap hexo-generator-baidu-sitemapfeed: type: atom path: atom.xml limit: 20sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 添加本地搜索 默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件 1$ npm install hexo-generator-json-content@2.2.0 --save 然后在根_config.yml添加配置： 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 最后在主题_config.yml添加配置： 1local_search: true 修改站点图标 站点图标存放在主题的Source目录下，已经默认准备了两张图片。您也可以自己设计站点LOGO。 需要准备一张ico格式并命名为favicon.ico 将其放入hexo目录的source文件夹，建议大小：32px X 32px。 首页添加文章置顶 在根目录下打开命令行窗口安装： 12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的Front-matter中加上top: true即可。 123456---title: BlueLake博客主题的详细配置tags: [hexo,BlueLake]categories: hexo博客折腾top: true--- 其他配置 show_category_count——是否显示分类下的文章数。 widgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。 12show_category_count: true widgets_on_small_screens: true 保留CNAME、README.md等文件 一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的： 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 3.Q&amp;A 博客中的图片无法显示问题 Hexo下的_config.yml里的post_asset_folder，把这个选项从false改成true Hexo目录下打开Git Brsh，执行一个下载上传图片插件的命令npm install hexo-asset-image --save 图片所在文件夹为文件同名的文件夹 .md中的图片仅仅保留图片名 4.常用hexo命令1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate &#x3D;&#x3D; hexo g #生成静态页面至public目录hexo server &#x3D;&#x3D; hexo s #开启预览访问端口（默认端口4000）hexo deploy &#x3D;&#x3D; hexo d #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 5.鸣谢12原文作者: 郑超(Charles·Zheng)原文链接: http:&#x2F;&#x2F;chaoo.oschina.io&#x2F;2016&#x2F;12&#x2F;29&#x2F;BlueLake博客主题的详细配置.html","tags":[{"name":"hexo","slug":"hexo","permalink":"http://goldcarpenter.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://goldcarpenter.github.io/tags/github/"}]}]