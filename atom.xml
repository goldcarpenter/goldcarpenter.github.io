<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>掘金木匠</title>
  
  <subtitle>不玩金融的软件工程师不是好的吃货</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://goldcarpenter.github.io/"/>
  <updated>2020-06-05T14:32:12.364Z</updated>
  <id>http://goldcarpenter.github.io/</id>
  
  <author>
    <name>掘金木匠</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内部类</title>
    <link href="http://goldcarpenter.github.io/2020/06/05/%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://goldcarpenter.github.io/2020/06/05/%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2020-06-05T14:04:35.663Z</published>
    <updated>2020-06-05T14:32:12.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><ul><li>分类<ul><li>成员内部类</li><li>局部内部类(包含匿名内部类)</li></ul></li></ul><h2 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h2><ul><li><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 内部类名称</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Body(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//外部类的方法——外部类用内部类，需要内部类对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//内部类用外部类，随意访问</span></span><br><span class="line">            System.out.println(name + <span class="string">"心脏跳动! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-1如何使用成员内部类"><a href="#1-1如何使用成员内部类" class="headerlink" title="1.1如何使用成员内部类"></a>1.1如何使用成员内部类</h3><ul><li><p>间接方式：在外部类的方法当中，使用内部类。然后只是调用外部类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Body body = <span class="keyword">new</span> Body(<span class="string">"掘金木匠"</span>);</span><br><span class="line"><span class="comment">// 在外部类的方法当中，使用内部类</span></span><br><span class="line">body.alive();</span><br></pre></td></tr></table></figure></li><li><p><strong>直接方式</strong>：公式：<code>[外部类名称.内部类名称对象名= new外部类名称().new内部类名称();]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Body.Heart heart = <span class="keyword">new</span> Body(<span class="string">"掘金木匠"</span>).<span class="keyword">new</span> Heart();</span><br><span class="line">heart.beat();</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2内部类同名变量"><a href="#1-2内部类同名变量" class="headerlink" title="1.2内部类同名变量"></a>1.2内部类同名变量</h3><ul><li><p>如果出现了重名现象，那么格式是：<code>外部类名称.this.外部类成员变量名</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">//外部类的成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> /*<span class="keyword">extends</span> <span class="title">object</span>*/ </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">20</span>; <span class="comment">//内部类的成员变量</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">30</span>; <span class="comment">//内部类方法的局部变量</span></span><br><span class="line">            System.out.println(num); <span class="comment">//局部变量，就近原则</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num); <span class="comment">//内部类的成员变量</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.num); <span class="comment">//外部类的成员变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-局部内部类"><a href="#2-局部内部类" class="headerlink" title="2.局部内部类"></a>2.局部内部类</h2><ul><li><p>如果一个类是<strong>定义在一个方法内部</strong>的，那么这就是一个局部内部类。</p></li><li><p><strong>局部</strong>：<strong>只有当前所属的方法才能使用它</strong>，出了这个方法外面就不能用了。</p></li><li><p>定义格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称(参数列表) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> 局部内部类名称</span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method0uter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num); <span class="comment">// 10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-1-局部内部类final问题"><a href="#2-1-局部内部类final问题" class="headerlink" title="2.1 局部内部类final问题"></a>2.1 局部内部类final问题</h3><ul><li><p>局部内部类，如果希望<strong>访问所在方法的局部变量</strong>，那么这个局部变量<strong>必须</strong>是有效<strong>final</strong>的</p></li><li><p>原因</p><ol><li>new出来的对象在堆内存当中。</li><li>局部变量是跟着方法走的，在栈内存当中。</li><li>方法运行结束之后，立刻出栈，局部变量就会立刻消失。</li><li>但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。</li><li><strong>局部变量与局部内部类的对象的生命周期不同；</strong></li></ol></li><li><p>为解决这一问题，Java把局部内部类要访问的局部变量<strong>重新拷贝了一份，并把备份放在内部类的常量池中</strong>，这样不论方法有没有执行结束，拷贝都是存在的，就不会再出现访问不存在的变量的错误了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOuter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method0uter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ⭐从Java 8开始，只要局部变量事实不变，那么final关键字可以省略。</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">//所在方法的局部变量</span></span><br><span class="line"><span class="comment">//      num = 130; × </span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyInner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部内部类访问的是方法体的参数呢？</p><p>Java采取的方法是，<strong>默认为局部内部类的构造方法传入该参数作为构造方法的参数，然后用该参数来初始化内部类中拷贝的变量a。</strong></p></li><li><p>上面通过拷贝一份局部变量来解决生命周期不同的问题，如果方法体和局部内部类都改变了a的值会怎么样呢？</p><ul><li><strong>Java规定局部内部类可访问的局部变量必须为final的，即内部类不能改变要访问的局部变量的值，这样就不会出现数据不同步的问题了。</strong></li></ul></li></ul><h2 id="3-匿名内部类【局部内部类特例】"><a href="#3-匿名内部类【局部内部类特例】" class="headerlink" title="3 匿名内部类【局部内部类特例】"></a>3 匿名内部类【局部内部类特例】</h2><ul><li><p>如果<strong>接口的实现类/父类的子类只需要使用唯一的一次</strong>，那么这种情况下就可以省略掉该类的定义，而改为使用匿名内部类</p></li><li><p>定义格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称() &#123;</span><br><span class="line">    <span class="comment">// 覆盖重写所有抽象方法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; col = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(col,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</span><br><span class="line">        <span class="comment">//==============================================</span></span><br><span class="line">        <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">ConsumerImpl</span> <span class="keyword">implements</span> <span class="title">Consumer</span>&lt;<span class="title">String</span>&gt;</span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ConsumerImpl consumer = <span class="keyword">new</span> ConsumerImpl();</span><br><span class="line">        col.stream().forEach(consumer);</span><br><span class="line">        <span class="comment">//==============================================</span></span><br><span class="line">        <span class="comment">// 匿名内部类</span></span><br><span class="line">        col.stream().forEach(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//==============================================</span></span><br><span class="line">        <span class="comment">// lambda表达式</span></span><br><span class="line">        col.stream().forEach(s -&gt; System.out.println(s));</span><br><span class="line">        <span class="comment">//==============================================</span></span><br><span class="line">        <span class="comment">// 方法引用</span></span><br><span class="line">        col.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-1-匿名对象"><a href="#3-1-匿名对象" class="headerlink" title="3.1 匿名对象"></a>3.1 匿名对象</h3><ul><li><p>创建对象时，只有创建对象的语句，却没有把对象地址赋值给某个变量</p></li><li><p>虽然<strong>是创建对象的简化写法</strong>，但是应用场景非常有限。</p></li><li><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名(参数列表)；</span><br></pre></td></tr></table></figure></li><li><p>应用场景</p><ul><li><p>创建匿名对象直接调用方法，没有变量名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line"><span class="keyword">new</span> Scanner(System.in).nextInt();</span><br></pre></td></tr></table></figure></li><li><p>匿名对象可以作为方法的参数和返回值</p><ul><li><p>作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 普通方式</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        input(sc);</span><br><span class="line">        <span class="comment">//匿名对象作为方法接收的参数</span></span><br><span class="line">        input(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Scanner sc)</span></span>&#123;</span><br><span class="line">        System.out.println(sc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作为返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 普通方式</span></span><br><span class="line">         Scanner sc = getScanner();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">getScanner</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//普通方式</span></span><br><span class="line">         <span class="comment">//Scanner sc = new Scanner(System.in);</span></span><br><span class="line">         <span class="comment">//return sc;</span></span><br><span class="line">         <span class="comment">//匿名对象作为方法返回值</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="3-2匿名内部类-VS-匿名对象"><a href="#3-2匿名内部类-VS-匿名对象" class="headerlink" title="3.2匿名内部类 VS 匿名对象"></a>3.2匿名内部类 VS 匿名对象</h3><ul><li>匿名内部类，在【创建对象】的时候，只能使用唯一一次；如果希望多次创建对象，而且类的内容一样的话，那么就必须使用单独定义的实现类了。</li><li>匿名对象，在【调用方法】的时候，只能调用唯一一次；如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</li><li>匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】</li><li>强调：匿名内部类和匿名对象不是一回事</li></ul><h2 id="4-类的权限修饰符"><a href="#4-类的权限修饰符" class="headerlink" title="4.类的权限修饰符"></a>4.类的权限修饰符</h2><ul><li>类的权限修饰符：<code>public</code> &gt; <code>protected</code> &gt;  <code>(default)</code> &gt; <code>private</code></li><li><strong>定义一个类的时候，权限修饰符规则</strong><ul><li><strong>外部类：public / (default)</strong></li><li>成员内部类：public / protected / (default) / private</li><li><strong>局部内部类：什么都不能写</strong></li></ul></li></ul><h2 id="5-编译后-Class文件"><a href="#5-编译后-Class文件" class="headerlink" title="5.编译后.Class文件"></a>5.编译后.Class文件</h2><ul><li>外部类保存为：<code>外部类.class</code></li><li>内部类保存为：<code>外部类$内部类.class</code></li></ul><p><img src="1581070999413.png" alt="1581070999413"></p><h2 id="6-访问权限"><a href="#6-访问权限" class="headerlink" title="6.访问权限"></a>6.访问权限</h2><ul><li>内部类用外部类，随意访问</li><li>外部类用内部类，需要内部类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123; <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    Body(String name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//外部类的方法——外部类用内部类，需要内部类对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">alive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//内部类用外部类，随意访问</span></span><br><span class="line">            System.out.println(name + <span class="string">"心脏跳动! "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;分类&lt;ul&gt;
&lt;li&gt;成员内部类&lt;/li&gt;
&lt;li&gt;局部内部类(包含匿名内部类)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java异常</title>
    <link href="http://goldcarpenter.github.io/2020/06/05/Java%E5%BC%82%E5%B8%B8/"/>
    <id>http://goldcarpenter.github.io/2020/06/05/Java%E5%BC%82%E5%B8%B8/</id>
    <published>2020-06-05T13:13:46.812Z</published>
    <updated>2020-06-05T14:02:48.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="1-Throwable异常体系"><a href="#1-Throwable异常体系" class="headerlink" title="1.Throwable异常体系"></a>1.Throwable异常体系</h2><ul><li><p>异常机制其实是帮助我们<strong>找到</strong>程序中的问题，<strong>异常的根类是<code>java.lang.Throwable</code>，</strong>其下有两个子类：<code>java.lang.Error</code>与<code>java.lang.Exception</code></p></li><li><p><strong>平常所说的异常指<code>java.lang.Exception</code></strong></p></li></ul><p><img src="%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.png" alt=""></p><h3 id="Error错误"><a href="#Error错误" class="headerlink" title="Error错误"></a>Error错误</h3><ul><li><p><strong>Error</strong>：严重错误Error，无法通过处理的错误，只能事先避免。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Error:错误</span></span><br><span class="line"><span class="comment">OutOfMemoryError: Java heap space</span></span><br><span class="line"><span class="comment">内存溢出的错误,创建的数组太大了,超出了给JVM分配的内存</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//必须修改代码,创建的数组小一点</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line">System.out.println(<span class="string">"后续代码"</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Exception异常"><a href="#Exception异常" class="headerlink" title="Exception异常"></a>Exception异常</h3><ul><li><strong>Exception</strong>：表示异常，异常产生后程序员可以通过代码的方式纠正，使程序继续运行，是必须要处理的。</li></ul><h3 id="Throwable中的常用方法"><a href="#Throwable中的常用方法" class="headerlink" title="Throwable中的常用方法"></a>Throwable中的常用方法</h3><ul><li><code>public void printStackTrace()</code>：打印异常的详细信息。包含了异常的类型，异常的原因，还包括异常出现的位置，<strong>在开发和调试阶段，都得使用printStackTrace。</strong></li><li><code>public String getMessage()</code>：获取发生异常的原因。提示给用户的时候,就提示错误原因。</li></ul><h2 id="2-异常分类"><a href="#2-异常分类" class="headerlink" title="2.异常分类"></a>2.异常分类</h2><ul><li><p><strong>我们平常说的异常就是指Exception</strong></p></li><li><p><strong>异常(Exception)的分类</strong>：根据在编译时期还是运行时期检查异常细分</p></li></ul><h3 id="编译时期异常"><a href="#编译时期异常" class="headerlink" title="编译时期异常"></a>编译时期异常</h3><ul><li><p><strong>编译时期异常</strong>：checked异常。在编译时期就会检查，如果没有处理异常，则编译失败。(如日期格式化异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);<span class="comment">//用来格式化日期</span></span><br><span class="line">Date date = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    date = sdf.parse(<span class="string">"1999-0909"</span>);<span class="comment">//把字符串格式的日期,解析为Date格式的日期</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行时期异常"><a href="#运行时期异常" class="headerlink" title="运行时期异常"></a>运行时期异常</h3><ul><li><p><strong>运行时期异常</strong>：runtime异常。在运行时期检查异常，在编译时期，运行异常不会编译器检测(不报错)。(如数学异常)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RuntimeException:运行期异常,java程序运行过程中出现的问题</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">//System.out.println(arr[0]);</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//可能会出现异常的代码</span></span><br><span class="line">System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="comment">//异常的处理逻辑</span></span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="%E5%BC%82%E5%B8%B8%E7%9A%84%E5%88%86%E7%B1%BB.png" alt=""></p></li></ul><h2 id="3-异常的产生过程解析"><a href="#3-异常的产生过程解析" class="headerlink" title="3.异常的产生过程解析"></a>3.异常的产生过程解析</h2><p>图解异常产生的过程</p><p><img src="%E5%BC%82%E5%B8%B8%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B.png" alt=""></p><h2 id="4-异常的处理"><a href="#4-异常的处理" class="headerlink" title="4.异常的处理"></a>4.异常的处理</h2><p>Java异常处理的五个关键字：<strong>try、catch、finally、throw、throws</strong></p><h3 id="抛出异常throw"><a href="#抛出异常throw" class="headerlink" title="抛出异常throw"></a>抛出异常throw</h3><ul><li><p>在编写程序时，<strong>程序出现问题的情况出现时需要使用抛出异常的方式来告诉调用者</strong>。</p></li><li><p>throw<strong>用在方法内</strong>，程序出现问题时用来抛出一个异常对象，将这个异常对象传递到调用者处，<strong>并结束当前方法的执行</strong>。</p><ol><li>创建一个异常对象，封装一些提示信息(信息可以自己编写)。</li><li>通过关键字throw将这个异常对象传递到调用者处。</li></ol></li><li><p><strong>使用格式：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> 异常类名(参数);</span><br></pre></td></tr></table></figure><p> 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"要访问的arr数组不存在"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"该索引在数组中不存在，已超出范围"</span>);</span><br></pre></td></tr></table></figure><p><strong>注意事项:</strong>    </p><ul><li><p><code>throw</code>关键字必须写在方法的内部</p></li><li><p><code>throw</code>关键字后边new的对象必须是Exception或者Exception的子类对象 </p></li><li><p><strong><code>throw</code>关键字抛出指定的异常对象，我们就必须处理这个异常对象</strong>  </p><ul><li><strong>throw关键字后边创建的是<code>RuntimeException</code>或者是<code>RuntimeException</code>的子类对象，可以不处理，默认交给JVM处理(打印异常对象,中断程序)</strong></li><li><strong>throw关键字后边创建的是编译异常(写代码的时候报错)，我们就必须处理这个异常，要么<code>throws</code>,要么<code>try...catch</code></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        以后(工作中)我们首先必须对方法传递过来的参数进行合法性校验</span></span><br><span class="line"><span class="comment">        如果参数不合法,那么我们就必须使用抛出异常的方式,告知方法的调用者,传递的参数有问题</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            NullPointerException是一个运行期异常,我们不用处理,默认交给JVM处理</span></span><br><span class="line"><span class="comment">            ArrayIndexOutOfBoundsException是一个运行期异常,我们不用处理,默认交给JVM处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getElement</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            我们可以对传递过来的参数数组,进行合法性校验</span></span><br><span class="line"><span class="comment">            如果数组arr的值是null</span></span><br><span class="line"><span class="comment">            那么我们就抛出空指针异常,告知方法的调用者"传递的数组的值是null"</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"传递的数组的值是null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            我们可以对传递过来的参数index进行合法性校验</span></span><br><span class="line"><span class="comment">            如果index的范围不在数组的索引范围内</span></span><br><span class="line"><span class="comment">            那么我们就抛出数组索引越界异常,告知方法的调用者"传递的索引超出了数组的使用范围"</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index&gt;arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"传递的索引超出了数组的使用范围"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ele = arr[index];</span><br><span class="line">        <span class="keyword">return</span> ele;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Objects非空判断"><a href="#Objects非空判断" class="headerlink" title="Objects非空判断"></a>Objects非空判断</h3><ul><li><p>类Objects曾经提到过它由一些静态的实用方法组成，这些方法是null-save（空指针安全的）或null-tolerant（容忍空指针的），那么在它的源码中，对对象为null的值进行了抛出异常操作。</p><ul><li><code>public static &lt;T&gt; T requireNonNull(T obj)</code>:查看指定引用对象不是null。</li></ul></li><li><p>查看源码发现这里对为null的进行了抛出异常操作：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对传递过来的参数进行合法性判断,判断是否为null</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj, String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(message);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Objects.requireNonNull(obj);</span><br><span class="line">Objects.requireNonNull(obj,<span class="string">"传递的对象的值是null"</span>);</span><br></pre></td></tr></table></figure><h3 id="异常处理的第一种方式：声明异常throws-交给别人处理"><a href="#异常处理的第一种方式：声明异常throws-交给别人处理" class="headerlink" title="异常处理的第一种方式：声明异常throws 交给别人处理"></a>异常处理的第一种方式：声明异常throws 交给别人处理</h3><ul><li><p><strong>声明异常</strong>：将问题标识出来，报告给调用者。如果方法内<strong>通过throw抛出了编译时异常</strong>，而没有捕获处理，那么必须通过throws进行声明，让调用者去处理。</p></li><li><p>关键字<strong>throws</strong>运用于方法声明之上，用于表示当前方法不处理异常，而是提醒该方法的调用者来处理异常(抛出异常).</p></li><li><p><strong>声明异常格式：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数) <span class="keyword">throws</span> 异常类名<span class="number">1</span>,异常类名<span class="number">2</span>…&#123;   &#125;</span><br></pre></td></tr></table></figure><ul><li>声明异常的代码演示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        read(<span class="string">"a.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果定义功能时有问题发生需要报告给调用者。可以通过在方法上使用throws关键字进行声明</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">"a.txt"</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件 </span></span><br><span class="line">            <span class="comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>throws关键字必须写在方法声明处   </li><li>throws关键字后边声明的异常必须是Exception或者是Exception的子类   </li><li>方法内部如果抛出了多个异常对象,那么throws后边必须也声明多个异常       <ul><li>如果抛出的多个异常对象有子父类关系，那么直接声明父类异常即可   </li></ul></li><li>调用了一个声明抛出异常的方法，我们就必须的处理声明的异常       <ul><li>要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM       </li><li>要么try…catch自己处理异常</li></ul></li></ul><h3 id="异常处理的第二种方式：捕获异常try…catch-自己处理"><a href="#异常处理的第二种方式：捕获异常try…catch-自己处理" class="headerlink" title="异常处理的第二种方式：捕获异常try…catch 自己处理"></a>异常处理的第二种方式：捕获异常try…catch 自己处理</h3><ul><li><p><strong>try-catch</strong>的方式就是捕获异常。</p></li><li><p><strong>捕获异常</strong>：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理。*</p></li><li><p>捕获异常语法如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能产生异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(定义一个异常的变量,用来接收<span class="keyword">try</span>中抛出的异常对象)&#123;</span><br><span class="line">    处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">catch</span>(异常类名 变量名)&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>try：</strong>该代码块中编写可能产生异常的代码。</p><p><strong>catch：</strong>用来进行某种异常的捕获，实现对捕获到的异常进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 当产生异常时，必须有处理方式。要么捕获，要么声明。</span></span><br><span class="line">            read(<span class="string">"b.txt"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">          <span class="comment">//try中抛出的是什么异常，在括号中就定义什么异常类型</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 我们 当前的这个方法中 有异常  有编译期异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">"a.txt"</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件 </span></span><br><span class="line">            <span class="comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finally-代码块"><a href="#finally-代码块" class="headerlink" title="finally 代码块"></a>finally 代码块</h3><ul><li>finally一般用于资源释放(资源回收),无论程序是否出现异常,最后都要资源释放(IO)</li><li><strong>finally</strong>：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally就是解决这个问题的，在<strong>finally代码块中存放的代码都是一定会被执行的</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            read(<span class="string">"a.txt"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//抓取到的是编译期异常  抛出去的是运行期 </span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"不管程序怎样，这里都将会被执行。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"over"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们 当前的这个方法中 有异常  有编译期异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!path.equals(<span class="string">"a.txt"</span>)) &#123;<span class="comment">//如果不是 a.txt这个文件 </span></span><br><span class="line">            <span class="comment">// 我假设  如果不是 a.txt 认为 该文件不存在 是一个错误 也就是异常  throw</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"文件不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当只有在try或者catch中调用退出JVM的相关方法，此时finally才不会执行，否则finally永远会执行。</p></blockquote><h3 id="异常注意事项"><a href="#异常注意事项" class="headerlink" title="异常注意事项"></a>异常注意事项</h3><ul><li><p>一般我们是使用一次捕获多次处理方式，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">     编写可能会出现异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型A  e)&#123;  当<span class="keyword">try</span>中出现A类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型B  e)&#123;  当<span class="keyword">try</span>中出现B类型异常,就用该<span class="keyword">catch</span>来捕获.</span><br><span class="line">     处理异常的代码</span><br><span class="line">     <span class="comment">//记录日志/打印异常信息/继续抛出异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</strong></p></li><li><p>如果finally有return语句，会永远返回finally中的结果，应该避免该情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = getA();</span><br><span class="line">       System.out.println(a);<span class="comment">//100</span></span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//定义一个方法,返回变量a的值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> a;</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           System.out.println(e);</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">//一定会执行的代码</span></span><br><span class="line">           a = <span class="number">100</span>;</span><br><span class="line">           <span class="keyword">return</span> a;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>子父类的异常</p><ul><li>如果父类抛出了多个异常，子类重写父类方法时，抛出和父类相同的异常或者是父类异常的子类或者不抛出异常。</li><li>父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。此时子类产生该异常，只能捕获处理，不能声明抛出</li><li>父类异常时什么样，子类异常就什么样</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException,ClassCastException</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> <span class="keyword">throws</span> IndexOutOfBoundsException</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> <span class="keyword">throws</span> IndexOutOfBoundsException</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="comment">//子类重写父类方法时,抛出和父类相同的异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException,ClassCastException</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//子类重写父类方法时,抛出父类异常的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> <span class="keyword">throws</span> ArrayIndexOutOfBoundsException</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//子类重写父类方法时,不抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        父类方法没有抛出异常，子类重写父类该方法时也不可抛出异常。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//public void show04() throws Exception&#123;&#125;  ×</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//此时子类产生该异常，只能捕获处理，不能声明抛出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show04</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"编译期异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-自定义异常"><a href="#5-自定义异常" class="headerlink" title="5.自定义异常"></a>5.自定义异常</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><strong>什么是自定义异常类:</strong><ul><li>在开发中根据自己业务的异常情况来定义异常类.</li><li>自定义一个业务逻辑异常: <strong>RegisterException</strong>。一个注册异常类。</li></ul></li><li><strong>异常类如何定义:</strong><ul><li><strong>自定义一个编译期异常：自定义类 并继承于<code>java.lang.Exception</code>。</strong></li><li><strong>自定义一个运行时期的异常类：自定义类 并继承于<code>java.lang.RuntimeException</code>。</strong></li></ul></li></ul><h3 id="自定义异常的练习"><a href="#自定义异常的练习" class="headerlink" title="自定义异常的练习"></a>自定义异常的练习</h3><p>要求：我们模拟注册操作，如果用户名已存在，则抛出异常并提示：亲，该用户名已经被注册。</p><p>首先定义一个登陆异常类RegisterException：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务逻辑异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 表示异常提示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegisterException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟登陆操作，使用数组模拟数据库中存储的数据，并提供当前注册账号是否存在方法用于判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 模拟数据库中已存在账号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] names = &#123;<span class="string">"bill"</span>,<span class="string">"hill"</span>,<span class="string">"jill"</span>&#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;     </span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="comment">// 可能出现异常的代码</span></span><br><span class="line">            checkUsername(<span class="string">"nill"</span>);</span><br><span class="line">            System.out.println(<span class="string">"注册成功"</span>);<span class="comment">//如果没有异常就是注册成功</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(RegisterException e)&#123;</span><br><span class="line">            <span class="comment">//处理异常</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断当前注册账号是否存在</span></span><br><span class="line">    <span class="comment">//因为是编译期异常，又想调用者去处理 所以声明该异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(String uname)</span> <span class="keyword">throws</span> LoginException</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.equals(uname))&#123;<span class="comment">//如果名字在这里面 就抛出登陆异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RegisterException(<span class="string">"亲"</span>+name+<span class="string">"已经被注册了！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h1&gt;&lt;h2 id=&quot;1-Throwable异常体系&quot;&gt;&lt;a href=&quot;#1-Throwable异常体系&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Github无法登陆</title>
    <link href="http://goldcarpenter.github.io/2020/02/06/GithububNologin/"/>
    <id>http://goldcarpenter.github.io/2020/02/06/GithububNologin/</id>
    <published>2020-02-06T00:56:17.000Z</published>
    <updated>2020-02-06T01:11:00.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul><li><p>最初在使用<code>git</code>时出现报错，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">ssh: Could not resolve hostname github.com: Temporary failure in name resolution</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure></li><li><p>登陆<code>github.com</code>，<strong>报告404</strong></p></li><li><p><code>ping github.com</code>，<strong>超时</strong></p></li></ul><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li><p>需要在<code>host</code>文件里做些修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure></li><li><p><code>Win10</code>操作系统，先给自己最高权限【右键-属性-安全-编辑】</p><p><img src="1580951058751.png" alt="1580951058751"></p></li><li><p>在<code>host</code>文件追加内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">192.30.253.113    github.com</span><br><span class="line">192.30.252.131 github.com</span><br><span class="line">185.31.16.185 github.global.ssl.fastly.net</span><br><span class="line">74.125.237.1 dl-ssl.google.com</span><br><span class="line">173.194.127.200 groups.google.com</span><br><span class="line">192.30.252.131 github.com</span><br><span class="line">185.31.16.185 github.global.ssl.fastly.net</span><br><span class="line">74.125.128.95 ajax.googleapis.com</span><br></pre></td></tr></table></figure></li><li><p><code>ping github.com</code>，成功</p></li><li><p>登陆<code>github.com</code>，成功</p></li><li><p>将<code>host</code>文件权限恢复</p></li></ul>]]></content>
    
    <summary type="html">
    
      解决Github无法登陆
    
    </summary>
    
    
      <category term="Debug记录" scheme="http://goldcarpenter.github.io/categories/Debug%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="hexo" scheme="http://goldcarpenter.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://goldcarpenter.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>javaIO（一）</title>
    <link href="http://goldcarpenter.github.io/2020/02/02/javaIO/"/>
    <id>http://goldcarpenter.github.io/2020/02/02/javaIO/</id>
    <published>2020-02-02T09:55:36.000Z</published>
    <updated>2020-02-02T10:01:06.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-File类"><a href="#1-File类" class="headerlink" title="1.File类"></a>1.File类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><ul><li><code>java.io.File</code> 类是<strong>文件和目录</strong>路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作</li><li>File类是一个与系统无关的类，任何的操作系统都可以使用这个类中的方法</li></ul><h2 id="1-2静态成员变量"><a href="#1-2静态成员变量" class="headerlink" title="1.2静态成员变量"></a>1.2静态成员变量</h2><ul><li><code>static String pathSeparator</code>：与系统有关的路径分隔符，为了方便，它被表示为一个字符串。</li><li><code>static char pathSeparatorChar</code>：与系统有关的路径分隔符。</li><li><code>static string separator</code>：与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。</li><li><code>static char separatorChar：</code>与系统有关的默认名称分隔符。</li></ul><h2 id="1-3-构造方法"><a href="#1-3-构造方法" class="headerlink" title="1.3 构造方法"></a>1.3 构造方法</h2><ul><li><code>public File(String pathname)</code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的File实例。  </li><li><code>public File(String parent, String child)</code> ：拼接 <strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</li><li><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。  </li><li>构造举例，代码如下：</li></ul><blockquote><ol><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li><li>路径可以是以文件结尾，也可以是以文件夹结尾</li><li>路径可以是相对路径,也可以是绝对路径</li><li>路径可以是存在，也可以是不存在</li><li>创建File对象，只是把字符串路径封装为File对象，不考虑路径的真假情况</li></ol></blockquote><h2 id="1-4-常用方法"><a href="#1-4-常用方法" class="headerlink" title="1.4 常用方法"></a>1.4 常用方法</h2><h3 id="1-4-1获取功能的方法"><a href="#1-4-1获取功能的方法" class="headerlink" title="1.4.1获取功能的方法"></a>1.4.1获取功能的方法</h3><ul><li><code>public String getAbsolutePath()</code> ：返回此File的<strong>绝对路径名字</strong>符串。</li><li><code>public String getPath()</code> ：将此File转换为<strong>绝对/相对路径名字</strong>符串，<code>toString</code>调用此方法实现。 </li><li><code>public String getName()</code>  ：返回由此File表示的<strong>文件或目录的名称</strong>。  </li><li><code>public long length()</code>  ：返回由此File表示的<strong>文件的大小</strong>，字节单位。 </li></ul><blockquote><p>API中说明：length()——表示文件的大小。但是File对象表示目录，则返回值0。</p></blockquote><h3 id="1-4-2绝对路径和相对路径"><a href="#1-4-2绝对路径和相对路径" class="headerlink" title="1.4.2绝对路径和相对路径"></a>1.4.2绝对路径和相对路径</h3><ul><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// D盘下的bbb.java文件</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"D:\\bbb.java"</span>);</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 项目下的bbb.java文件</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"bbb.java"</span>);</span><br><span class="line">        System.out.println(f2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">D:\bbb.java</span><br><span class="line">D:\idea_project_test4\bbb.java</span><br></pre></td></tr></table></figure><h3 id="1-4-3判断功能的方法"><a href="#1-4-3判断功能的方法" class="headerlink" title="1.4.3判断功能的方法"></a>1.4.3判断功能的方法</h3><ul><li><code>public boolean exists()</code> ：此File表示的<strong>文件或目录是否实际存在</strong>。</li><li><code>public boolean isDirectory()</code> ：此File表示的<strong>是否为目录</strong>。</li><li><code>public boolean isFile()</code> ：此File表示的<strong>是否为文件</strong>。</li></ul><blockquote><p>isFile() &amp; isDirectory() 使用前提，路径必须是存在的，否则都返回false</p></blockquote><h3 id="1-4-4创建删除功能的方法"><a href="#1-4-4创建删除功能的方法" class="headerlink" title="1.4.4创建删除功能的方法"></a>1.4.4创建删除功能的方法</h3><ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，<strong>创建一个新的空文件</strong>。 <ul><li>只能创建文件，不能创建文件夹</li><li>创建文件的路径必须存在，否则会抛出异常</li><li>文件存在，不会创建，返回false</li></ul></li><li><code>public boolean delete()</code> ：<strong>删除</strong>由此File表示的<strong>文件或目录</strong>。  <ul><li>如果此File表示目录，文件夹中有内容，不会删除返回false，目录必须为空才能删除</li><li>构造方法中路径不存在，返回false</li><li>直接在硬盘删除文件/文件夹，不走回收站，删除要谨慎</li></ul></li><li><code>public boolean mkdir()</code> 【不常用】：<strong>创建</strong>由此File表示的<strong>单级目录</strong>。<ul><li>文件夹存在，不会创建，返回false</li><li>构造方法中给出的路径不存在，返回false</li></ul></li><li><code>public boolean mkdirs()</code> 【常用】：创建由此File表示的目录，<strong>包括任何必需但不存在的父目录</strong>。<ul><li>既可以创建单级文件夹，也可以创建多级文件夹</li></ul></li></ul><h2 id="1-5目录的遍历"><a href="#1-5目录的遍历" class="headerlink" title="1.5目录的遍历"></a>1.5目录的遍历</h2><ul><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"d:\\java_code"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//获取当前目录下的文件以及文件夹的名称。</span></span><br><span class="line">String[] names = dir.list();</span><br><span class="line"><span class="keyword">for</span>(String name : names)&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>调用遍历方法的File对象，表示的必须是实际存在的目录，否则返回null，无法进行遍历。</li><li>可以遍历到隐藏的文件夹</li></ol></blockquote><h2 id="1-6文件过滤器实现"><a href="#1-6文件过滤器实现" class="headerlink" title="1.6文件过滤器实现"></a>1.6文件过滤器实现</h2><ul><li><code>java.io.FileFilter</code>是一个接口，File过滤器。 该接口的对象可以传递给File类<code>listFiles(FileFilter)</code> 作为参数， 接口中只有一个方法。</li><li><code>boolean accept(File pathname)</code> ：测试pathname是否应该包含在当前File目录中，符合则返回true。</li></ul><p><strong>分析</strong>：</p><ol><li>接口作为参数，需要传递子类对象，重写其中方法。我们选择匿名内部类方式，比较简单。</li><li><code>accept</code>方法，参数为File，表示当前File下所有的子文件和子目录。保留住则返回true，过滤掉则返回false。保留规则：<ol><li>要么是.java文件。</li><li>要么是目录，用于继续遍历。</li></ol></li><li>通过过滤器的作用，<code>listFiles(FileFilter)</code>返回的数组元素中，子文件对象都是符合条件的，可以直接打印。</li></ol><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">        printDir2(dir);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir2</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 匿名内部类方式,创建过滤器子类对象</span></span><br><span class="line">        File[] files = dir.listFiles(<span class="keyword">new</span> FileFilter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File pathname)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> pathname.getName().endsWith(<span class="string">".java"</span>)||pathname.isDirectory();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      <span class="comment">// 循环打印</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"文件名:"</span> + file.getAbsolutePath());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                printDir2(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7文件过滤器实现Lambda优化"><a href="#1-7文件过滤器实现Lambda优化" class="headerlink" title="1.7文件过滤器实现Lambda优化"></a>1.7文件过滤器实现Lambda优化</h2><p><strong>分析：</strong><code>FileFilter</code>是只有一个方法的接口，因此可以用lambda表达式简写。</p><p>lambda格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()-&gt;&#123; &#125;</span><br></pre></td></tr></table></figure><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir3</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// lambda的改写</span></span><br><span class="line">    File[] files = dir.listFiles(f -&gt;&#123; </span><br><span class="line">      <span class="keyword">return</span> f.getName().endsWith(<span class="string">".java"</span>) || f.isDirectory(); </span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 循环打印</span></span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"文件名:"</span> + file.getAbsolutePath());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        printDir3(file);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-IO流"><a href="#2-IO流" class="headerlink" title="2.IO流"></a>2.IO流</h1><h2 id="2-1IO的分类"><a href="#2-1IO的分类" class="headerlink" title="2.1IO的分类"></a>2.1IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><h2 id="2-2顶级父类"><a href="#2-2顶级父类" class="headerlink" title="2.2顶级父类"></a>2.2顶级父类</h2><table><thead><tr><th align="center"></th><th align="center"><strong>输入流</strong></th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center"><strong>字节流</strong></td><td align="center">字节输入流<br/><strong>InputStream</strong></td><td align="center">字节输出流<br/><strong>OutputStream</strong></td></tr><tr><td align="center"><strong>字符流</strong></td><td align="center">字符输入流<br/><strong>Reader</strong></td><td align="center">字符输出流<br/><strong>Writer</strong></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      javaIO（一）
    
    </summary>
    
    
      <category term="java基础" scheme="http://goldcarpenter.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://goldcarpenter.github.io/tags/java/"/>
    
      <category term="IO" scheme="http://goldcarpenter.github.io/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客绑定自定义域名</title>
    <link href="http://goldcarpenter.github.io/2019/02/18/hexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    <id>http://goldcarpenter.github.io/2019/02/18/hexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</id>
    <published>2019-02-18T11:40:20.000Z</published>
    <updated>2019-12-29T04:58:11.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备"></a>1.准备</h1><ul><li>一个已经备案的阿里云域名（国内备案可太麻烦了）<ul><li>一般域名实名认证通过后2-3天，才会恢复解析</li></ul></li></ul><h1 id="2-前置知识"><a href="#2-前置知识" class="headerlink" title="2.前置知识"></a>2.前置知识</h1><ul><li><p>修改阿里云域名解析</p><p><img src="1577534722114.png" alt="1577534722114"></p></li><li><p>主机记录 &amp; 记录值 &amp; 记录类型</p><ul><li><p>主机记录【<strong>设置子域名</strong>】：指创建子域名时所添加域名前缀</p><table><thead><tr><th align="center">主机记录</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>www</strong></td><td align="center">解析后的域名为<a href="http://www.aliyun.com" target="_blank" rel="noopener">www.aliyun.com</a></td></tr><tr><td align="center"><strong>@</strong></td><td align="center">直接解析主域名 aliyun.com</td></tr><tr><td align="center">*****</td><td align="center">泛解析，匹配其他所有域名 *.aliyun.com</td></tr><tr><td align="center"><strong>mail</strong></td><td align="center">将域名解析为mail.aliyun.com，通常用于解析邮箱服务器</td></tr><tr><td align="center"><strong>二级域名</strong></td><td align="center">如：abc.aliyun.com，填写abc</td></tr><tr><td align="center"><strong>三级域名</strong></td><td align="center">a.<a href="http://www.example.com，填写a.www" target="_blank" rel="noopener">www.example.com，填写a.www</a></td></tr><tr><td align="center"><strong>手机网站</strong></td><td align="center">如：m.aliyun.com，填写m</td></tr></tbody></table></li><li><p>记录值是指需要将子域名指向哪个解析地址</p><ul><li>可以输入服务器IP地址，也可以输入域名</li></ul></li><li><p>记录类型</p><ul><li><strong>A记录</strong>：最普通常见的域名解析，是把某一主机名解析到服务器IP</li></ul><table><thead><tr><th align="center">主机记录</th><th align="center">类型</th><th align="center">记录值</th></tr></thead><tbody><tr><td align="center">www</td><td align="center">A</td><td align="center">192.168.0.1</td></tr></tbody></table><ul><li><strong>CNAME记录</strong>：是主机名到主机名的映射</li></ul><table><thead><tr><th align="center">主机记录</th><th align="center">类型</th><th align="center">记录值</th></tr></thead><tbody><tr><td align="center">@</td><td align="center">CNAME</td><td align="center">othername.com</td></tr></tbody></table><ul><li><strong>AAAA：</strong>用来指定主机名（或域名）对应的IPv6地址。A记录对应的是IPV4地址</li><li><strong>url转发</strong>：可以转发到某一个目录下，甚至某一个文件上。</li><li><strong>url转发和cname的主要区别</strong>：CNAME记录是不可以转发到某一个目录下，甚至某一个文件上</li></ul></li></ul></li></ul><h1 id="3-配置阿里云域名解析"><a href="#3-配置阿里云域名解析" class="headerlink" title="3.配置阿里云域名解析"></a>3.配置阿里云域名解析</h1><ul><li><p>无论是A记录、CNAME、URL转发<strong>在实际使用时是全部可以设置多条记录的</strong></p></li><li><p>为了之后项目域名保留，<strong>博客使用二级域名scu</strong>.yangyuxin.top</p><ul><li>使用在线域名解析发现原域名对应多个IP，可能做了负载均衡，故记录类型没有使用A类型</li></ul><table><thead><tr><th align="center">记录类型</th><th align="center">主机记录</th><th align="center">记录值</th></tr></thead><tbody><tr><td align="center">CNAME</td><td align="center">scu</td><td align="center">博客原域名</td></tr></tbody></table></li><li><p>获取博客IP地址方法</p><ul><li>cmd窗口中ping 博客原goldcarpenter.github.io</li><li><a href="https://site.ip138.com/" target="_blank" rel="noopener">网页在线域名解析服务获取</a></li></ul></li><li><p>在本地博客<code>..\source</code>中新建<code>CNAME</code>文件，注意无拓展名，内容输入<code>scu.yangyuxin.top</code>【新域名】</p></li><li><p>使用git shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>如此 在github的<strong>博客仓库</strong>中就会设置<strong>自定义域名，已经修改</strong>，无需再次修改</p></li><li><p>大功告成</p></li></ul>]]></content>
    
    <summary type="html">
    
      将github上部署的个人博客绑定阿里云备案域名
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://goldcarpenter.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://goldcarpenter.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://goldcarpenter.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>【博客搭建】使用hexo与github搭建个人博客系统（一）</title>
    <link href="http://goldcarpenter.github.io/2018/10/27/%E9%85%8D%E7%BD%AEhexo%E4%B8%8Egithub/"/>
    <id>http://goldcarpenter.github.io/2018/10/27/%E9%85%8D%E7%BD%AEhexo%E4%B8%8Egithub/</id>
    <published>2018-10-27T14:19:02.000Z</published>
    <updated>2019-12-28T11:52:22.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-软件准备"><a href="#1-软件准备" class="headerlink" title="1.软件准备"></a>1.软件准备</h1><ul><li><p>软件准备</p><ul><li>注册Github账户(略)</li><li>安装node.js软件(略)</li><li>安装Git软件(略)</li><li>建议安装Typora(编辑博文使用，略)</li></ul></li><li><p>创建github page仓库</p><ul><li>在Github中创建<code>goldcarpenter.github.io</code>(goldcarpenter为github用户名)的仓库</li><li>未来博客网站访问地址就是<a href="https://goldcarpenter.github.io">https://goldcarpenter.github.io</a> 了</li><li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟</li></ul></li><li><p>配置SSH key</p><ul><li>使用SSH key（公钥私钥）验证登录可以简化我们的登录过程，避免输入账户密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@qq.com&quot;</span><br><span class="line">提示信息——连续3次回车</span><br></pre></td></tr></table></figure><ul><li>在C盘的用户当前用户目录下找到<code>.ssh\id_rsa.pub</code>，将公钥内容使用软件打开拷贝至<code>setting -&gt; SSH and GPG keys -&gt; New SSH key</code></li></ul><p><img src="1577507997408.png" alt=""></p><ul><li>将刚复制的内容粘贴到key那里，title填你的计算机名称，保存。</li></ul></li><li><p>测试SSH key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com # 注意邮箱地址不用改</span><br></pre></td></tr></table></figure><p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi goldcarpenter! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><ul><li>如果你是首次使用git，git shell中配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你的github用户名</span><br><span class="line">$ git config --global user.name &quot;goldcarpenter&quot;</span><br><span class="line"></span><br><span class="line">填写你的github注册邮箱</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;</span><br></pre></td></tr></table></figure></li></ul><h1 id="2-搭建hexo博客系统"><a href="#2-搭建hexo博客系统" class="headerlink" title="2.搭建hexo博客系统"></a>2.搭建hexo博客系统</h1><h2 id="2-1-前言"><a href="#2-1-前言" class="headerlink" title="2.1.前言"></a>2.1.前言</h2><ul><li>hexo简介<ul><li>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，<strong>支持Markdown格式</strong>，有众多优秀插件和主题。</li></ul></li><li>hexo原理<ul><li>由于<strong>github pages存放的都是静态文件</strong>，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容</li><li>hexo将这些<strong>md文件都放在本地</strong>，每次写完文章后调用写好的命令来批量完成相关<strong>页面的生成</strong>，然后再将有改动的页面<strong>提交到github</strong></li></ul></li><li>注意事项<ol><li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，为避免不必要的问题，<strong>使用的命令建议全部使用git bash来执行</strong></li><li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</li><li>hexo有2类<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下管理各个主题的<code>_config.yml</code>；</li></ol></li></ul><h2 id="2-2-本地hexo使用"><a href="#2-2-本地hexo使用" class="headerlink" title="2.2.本地hexo使用"></a>2.2.本地hexo使用</h2><ul><li><p>安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p>创建博客本地存放文件夹</p><ul><li>在电脑的某个地方新建一个文件夹，作为存放代码的地方。我的是<code>F:\Project\Hexo_Repo</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd [目标目录]</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p><img src="1577508913819.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── .deploy        #需要部署的文件</span><br><span class="line">├── node_modules    #Hexo插件</span><br><span class="line">├── public          #生成的静态网页文件</span><br><span class="line">├── scaffolds      #模板</span><br><span class="line">├── source         #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><br><span class="line">| ├── _drafts      #草稿</span><br><span class="line">| └── _posts        #文章</span><br><span class="line">├── themes          #主题</span><br><span class="line">├── _config.yml    #全局配置文件</span><br><span class="line">└── package.json    #npm 依赖等</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 生成相关页面</span><br><span class="line">$ hexo s # 启动本地hexo预览服务</span><br></pre></td></tr></table></figure><ul><li>执行以上命令之后，hexo就会在<strong>public文件夹</strong>生成相关html文件，<strong>这些文件将来都是要提交到github的</strong></li><li><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到hexo写了一篇名为 Hello World 的文章内容</li></ul><p><img src="1577509279634.png" alt=""></p></li><li><p>修改主题</p><ul><li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">官方主题</a>中有很多优秀的主题，本文使用主题为<code>BlueLake</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd [目标目录]</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;chaooo&#x2F;hexo-theme-BlueLake.git themes&#x2F;BlueLake</span><br></pre></td></tr></table></figure><ul><li>下载后的主题放在<code>themes</code>目录中</li><li>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-jade@0.3.0 --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><ul><li>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: BlueLake</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><ul><li><p>更新主题</p><ul><li>今后若主题添加了新功能正是需要的，可以直接<code>git pull</code>来更新主题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes&#x2F;BlueLake</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-3-hexo上传Github"><a href="#2-3-hexo上传Github" class="headerlink" title="2.3.hexo上传Github"></a>2.3.hexo上传Github</h2><ul><li><p>上传之前</p><ul><li><p>一定要记得先把你以前所有代码pull下来（虽然github有版本管理，但备份一下总是好的）</p></li><li><p><strong>因为从hexo提交代码时会把你以前的所有代码都删掉</strong></p></li></ul></li><li><p>上传前配置准备</p><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>配置<code>_config.yml</code>中有关deploy的部分</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:goldcarpenter&#x2F;goldcarpenter.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>上传</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-4-写博客"><a href="#2-4-写博客" class="headerlink" title="2.4.写博客"></a>2.4.写博客</h2><ul><li><p>定位到我们的hexo根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#39;配置hexo与github&#39;</span><br></pre></td></tr></table></figure></li><li><p>hexo会帮我们在<code>_posts</code>下生成相关配置<code>hexo与github.md</code>文件</p></li><li><p>需要打开这个文件就可以开始写博客了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br></pre></td></tr></table></figure></li><li><p>如何让博文列表不显示全部内容</p><p>默认情况下，生成的博文目录会显示全部的文章内容，在合适的位置加上<code>&lt;!--more--&gt;</code>即可设置文章摘要的长度</p></li></ul><h2 id="2-5-博客系统优化"><a href="#2-5-博客系统优化" class="headerlink" title="2.5.博客系统优化"></a>2.5.博客系统优化</h2><ul><li><p><code>根_config.yml</code>配置</p><p><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">_config.yml详细说明</a></p><table><thead><tr><th align="center">参数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>title</code></td><td align="center">网站标题 显示在网站头部</td></tr><tr><td align="center"><code>subtitle</code></td><td align="center">网站副标题 显示在网站头部</td></tr><tr><td align="center"><code>description</code></td><td align="center">网站描述 加入网站源码的<code>meta</code>标签中 主要用于SEO</td></tr><tr><td align="center"><code>keywords</code></td><td align="center">网站的关键词。使用半角逗号 <code>,</code> 分隔多个关键词。</td></tr><tr><td align="center"><code>author</code></td><td align="center">您的名字 网站底部的<code>Copyright</code>处有所显示</td></tr><tr><td align="center"><code>language</code></td><td align="center">简体中文（zh-CN）繁体中文（zh-TW）英语（en）</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: 掘金木匠</span><br><span class="line">subtitle: 不玩金融的软件工程师不是好的吃货</span><br><span class="line">description: JJMJ&#39;s blog.</span><br><span class="line">keywords: Java, Spring, MyBatis, 后端</span><br><span class="line">author: 掘金木匠</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: &#39;&#39;</span><br></pre></td></tr></table></figure></li><li><p><code>主题_config.yml</code>设置</p><ul><li><p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  - page: home</span><br><span class="line">    directory: .</span><br><span class="line">    icon: fa-home</span><br><span class="line">  - page: archive</span><br><span class="line">    directory: archives&#x2F;</span><br><span class="line">    icon: fa-archive</span><br><span class="line">  - page: about</span><br><span class="line">    directory: about&#x2F;</span><br><span class="line">    icon: fa-user</span><br><span class="line"> #- page: rss</span><br><span class="line"> #  directory: atom.xml</span><br><span class="line"> #  icon: fa-rss</span><br></pre></td></tr></table></figure></li><li><p>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">about:</span><br><span class="line">  email: ## 个人邮箱 </span><br><span class="line">  weibo_url: ## 微博主页链接地址</span><br><span class="line">  github_url: ## github主页链接地址</span><br></pre></td></tr></table></figure></li><li><p>添加about页</p><ul><li>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &#39;about&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">about:</span><br><span class="line">  photo_url: ## 头像的链接地址</span><br><span class="line">  email: ## 个人邮箱 </span><br><span class="line">  weibo_url: ## 微博主页链接地址</span><br><span class="line">  weibo_name: ## 微博用户名 </span><br><span class="line">  github_url: ## github主页链接地址</span><br><span class="line">  github_name: ## github用户名</span><br></pre></td></tr></table></figure><ul><li>当然也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好</li></ul></li><li><p>安装 RSS(订阅) 和 sitemap(网站地图) 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>添加<code>主题_config.yml</code>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">  hexo-generator-feed</span><br><span class="line">  hexo-generator-sitemap</span><br><span class="line">  hexo-generator-baidu-sitemap</span><br><span class="line"></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line"></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>添加本地搜索</p><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content" target="_blank" rel="noopener">hexo-generator-json-content</a>来创建JSON数据文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure><p>然后在<code>根_config.yml</code>添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: false</span><br><span class="line">  pages: false</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    date: true</span><br><span class="line">    path: true</span><br><span class="line">    text: true</span><br><span class="line">    raw: false</span><br><span class="line">    content: false</span><br><span class="line">    slug: false</span><br><span class="line">    updated: false</span><br><span class="line">    comments: false</span><br><span class="line">    link: false</span><br><span class="line">    permalink: false</span><br><span class="line">    excerpt: false</span><br><span class="line">    categories: false</span><br><span class="line">    tags: true</span><br></pre></td></tr></table></figure><p>最后在<code>主题_config.yml</code>添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_search: true</span><br></pre></td></tr></table></figure></li><li><p>修改站点图标</p><ul><li>站点图标存放在主题的<code>Source</code>目录下，已经默认准备了两张图片。您也可以自己设计站点LOGO。</li><li>需要准备一张ico格式并命名为favicon.ico <strong>将其放入hexo目录的source文件夹，建议大小：32px X 32px。</strong></li></ul></li><li><p>首页添加文章置顶</p><p>在根目录下打开命令行窗口安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>然后在需要置顶的文章的Front-matter中加上top: true即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: BlueLake博客主题的详细配置</span><br><span class="line">tags: [hexo,BlueLake]</span><br><span class="line">categories: hexo博客折腾</span><br><span class="line">top: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>其他配置</p><p><code>show_category_count</code>——是否显示分类下的文章数。</p><p><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show_category_count: true </span><br><span class="line">widgets_on_small_screens: true</span><br></pre></td></tr></table></figure></li></ul></li><li><p>保留CNAME、README.md等文件</p><ul><li>一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：</li></ul><p><img src="1577510118920.png" alt=""></p><ul><li>由于hexo<strong>默认会把所有md文件都转换成html</strong>，包括README.md，所有需要<strong>每次生成之后</strong>、<strong>上传之前</strong>，<strong>手动</strong>将README.md复制到public目录，并删除README.html。</li></ul></li></ul><h1 id="3-Q-amp-A"><a href="#3-Q-amp-A" class="headerlink" title="3.Q&amp;A"></a>3.Q&amp;A</h1><ul><li><p>博客中的图片无法显示问题</p><ul><li>Hexo下的<code>_config.yml</code>里的<code>post_asset_folder</code>，把这个选项从<code>false</code>改成<code>true</code></li><li><code>Hexo</code>目录下打开Git Brsh，执行一个下载上传图片插件的命令<code>npm install hexo-asset-image --save</code></li><li>图片所在文件夹为文件<strong>同名的文件夹</strong></li><li>.md中的<strong>图片仅仅保留图片名</strong></li></ul></li></ul><h1 id="4-常用hexo命令"><a href="#4-常用hexo命令" class="headerlink" title="4.常用hexo命令"></a>4.常用hexo命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot;    #新建页面</span><br><span class="line">hexo generate &#x3D;&#x3D; hexo g#生成静态页面至public目录</span><br><span class="line">hexo server   &#x3D;&#x3D; hexo s#开启预览访问端口（默认端口4000）</span><br><span class="line">hexo deploy   &#x3D;&#x3D; hexo d#部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure><h1 id="5-鸣谢"><a href="#5-鸣谢" class="headerlink" title="5.鸣谢"></a>5.鸣谢</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原文作者: 郑超(Charles·Zheng)</span><br><span class="line">原文链接: http:&#x2F;&#x2F;chaoo.oschina.io&#x2F;2016&#x2F;12&#x2F;29&#x2F;BlueLake博客主题的详细配置.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Github和Hexo搭建自己的博客系统
    
    </summary>
    
    
      <category term="博客搭建" scheme="http://goldcarpenter.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://goldcarpenter.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://goldcarpenter.github.io/tags/github/"/>
    
  </entry>
  
</feed>
